generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum Office {
  SDO
  School
}

enum RequestType {
  EXTERNAL_ELEM
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  signature  String
  role       UserRole @default(CLIENT)
  positionId String   @map("position_id")
  stationId  String   @map("station_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  station     Station       @relation(fields: [stationId], references: [id], onDelete: Cascade)
  TravelOrder TravelOrder[]
  Actions     Actions[]
  Position    Position      @relation(fields: [positionId], references: [id])

  @@map("users")
}

model Position {
  id            String @id @default(cuid())
  code          String @unique
  title         String
  recommending  String
  finalApproval String

  User User[]
}

model Station {
  id        String   @id @default(cuid())
  office    Office   @default(School)
  unit      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("stations")
}

model TravelOrder {
  id                           String    @id @default(cuid())
  code                         String    @unique
  userId                       String    @map("user_id")
  purpose                      String
  host                         String
  inclusiveDates               String
  destination                  String
  fundSource                   String
  additionalParticipants       String?   @db.Text
  attachedFile                 String
  isRecommendingApprovalSigned Boolean   @default(false)
  isFinalApprovalSigned        Boolean   @default(false)
  recommendingApprovalAt       DateTime?
  finalApprovalAt              DateTime?
  employeeSignature            String?
  recommendingSignature        String?
  finalSignature               String?
  status                       String?
  finalPdfUrl                  String?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Actions Actions[]

  @@map("travel_orders")
}

model Actions {
  id            String   @id @default(cuid())
  code          String
  travelOrderId String   @map("travel_order_id")
  action        String
  remarks       String?
  userId        String   @map("user_id")
  createdAt     DateTime @default(now())

  travelOrder TravelOrder @relation(fields: [travelOrderId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("actions_history")
}
