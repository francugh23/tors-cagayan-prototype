generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ACCOUNT_HOLDER
  SIGNATORY
}

enum RequestType {
  WITHIN_DIVISION
  OUTSIDE_DIVISION
  ANY
}

enum DesignationType {
  SDO
  ELEMENTARY
  SECONDARY
}

enum PositionType {
  SDS
  ASDS_ELEM
  ASDS_SEC
  SCHOOL_HEAD
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           UserRole @default(ACCOUNT_HOLDER)
  designation_id String
  position_id    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  designation Designation @relation(fields: [designation_id], references: [id], onDelete: Restrict)
  position    Position?   @relation(fields: [position_id], references: [id], onDelete: SetNull)

  TravelOrders TravelOrder[]
  Actions      Actions[]

  @@map("users")
}

model TravelOrder {
  id                  String      @id @default(cuid())
  code                String      @unique
  request_type        RequestType
  requester_id        String
  requester_name      String
  position            String
  purpose             String
  host                String
  travel_period       String
  destination         String
  fund_source         String
  attached_file       String
  authority_id        String
  recommending_status String?
  approving_status    String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  requester User      @relation(fields: [requester_id], references: [id])
  authority Authority @relation(fields: [authority_id], references: [id])
  actions   Actions[]
}

model Designation {
  id        String          @id @default(cuid())
  type      DesignationType
  code      String          @unique
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  users User[]

  @@map("designations")
}

model Position {
  id        String       @id @default(cuid())
  type      PositionType @unique
  title     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  users User[]

  recommendingAuthorities Authority[] @relation("RecommendingAuthority")
  approvingAuthorities    Authority[] @relation("ApprovingAuthority")

  @@map("positions")
}

model Authority {
  id                       String          @id @default(cuid())
  request_type             RequestType
  designation_type         DesignationType
  recommending_position_id String?         @map("recommending_position_id")
  approving_position_id    String          @map("approving_position_id")
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt

  recommending_position Position?     @relation("RecommendingAuthority", fields: [recommending_position_id], references: [id], onDelete: Restrict)
  approving_position    Position      @relation("ApprovingAuthority", fields: [approving_position_id], references: [id], onDelete: Restrict)
  travelOrder           TravelOrder[]

  @@map("authorities")
}

model Actions {
  id              String      @id @default(cuid())
  code            String
  travel_order_id String
  user_id         String
  action          String
  remarks         String?
  createdAt       DateTime    @default(now())
  travelOrder     TravelOrder @relation(fields: [travel_order_id], references: [id])

  users User[]
}

//Notes:

//Rules Explained

//1. User -> Designation: Restrict
//      Can't delete a designation (office/school) if there are users associated with it.

//2. User -> Position: SetNull
//      If a position is deleted, set the position_id in users to null.

//3. Authority -> Position: Restrict
//      Can't delete a position if it's used in approval rules.
